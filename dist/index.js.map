{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import moment from \"moment\";\nmoment.suppressDeprecationWarnings = true;\n\n/**\n * @name transform\n * @param {Date|number|string} dateTime\n * @param {*} config\n * @returns {number|string}\n */\nfunction transform(dateTime, config) {\n  if (!dateTime) {\n    throw new Error(`Invalid Date: ${dateTime}`);\n  }\n  let options = {};\n  if (config) {\n    if (typeof config === \"string\") {\n      Object.assign(options, { format: config });\n    } else {\n      Object.assign(options, config);\n    }\n  }\n  const { format, keepLocalTime, keepOffset, rfc2822, unixTimestamp, utcOffset } = {\n    ...{\n      format: undefined,\n      keepLocalTime: true,\n      keepOffset: true,\n      unixTimestamp: false,\n      utcOffset: undefined,\n      rfc2822: false,\n    },\n    ...options,\n  };\n  const instance = moment(dateTime);\n  if (!instance.isValid()) {\n    throw new Error(`Invalid Date: ${dateTime}`);\n  }\n  if (Number.isInteger(utcOffset) || (utcOffset && typeof utcOffset === \"string\")) {\n    instance.utcOffset(utcOffset, keepLocalTime);\n  }\n  if (unixTimestamp === true) {\n    return instance.valueOf();\n  }\n  if (typeof format === \"string\") {\n    return instance.format(options.format);\n  }\n  if (rfc2822 === true) {\n    return instance.toDate().toUTCString();\n  }\n  return instance.toISOString(keepOffset);\n}\n\n/**\n * @name toDateTime\n * @param {string|object=} config\n * @returns {function(*=): number|string}\n * @throws Error\n */\nexport function toDateTime(config) {\n  return (date) => transform(date, config);\n}\n\n/**\n * @name toFormat\n * @param {string=} format\n * @param {number|string=} utcOffset\n * @returns {function(*=): string}\n * @throws Error\n */\nexport function toFormat(format = \"YYYY-MM-DD HH:mm:ss\", utcOffset) {\n  return (date) => transform(date, { format, utcOffset });\n}\n\n/**\n * @name toHourMinSec\n * @param {number|string=} utcOffset\n * @returns {function(*=): string}\n * @throws Error\n */\nexport function toHourMinSec(utcOffset) {\n  return (date) => transform(date, { format: \"HH:mm:ss\", utcOffset });\n}\n\n/**\n * @name toISO8601\n * @param {boolean=true} keepLocalTime\n * @param {number|string=} utcOffset\n * @returns {function(*=): string}\n * @throws Error\n */\nexport function toISO8601(keepLocalTime = true, utcOffset) {\n  return (date) => transform(date, { keepLocalTime, keepOffset: true, utcOffset });\n}\n\n/**\n * @name toISO\n * @param {boolean=true} keepLocalTime\n * @param {boolean=false} keepOffset\n * @param {number|string=} utcOffset\n * @returns {function(*=): string}\n * @throws Error\n */\nexport function toISO(keepLocalTime = true, keepOffset = false, utcOffset) {\n  return (date) => transform(date, { keepLocalTime, keepOffset, utcOffset });\n}\n\n/**\n * @name toRFC2822\n * @param {number|string=} utcOffset\n * @returns {function(*=): string}\n * @throws Error\n */\nexport function toRFC2822(utcOffset) {\n  return (date) => transform(date, { rfc2822: true, utcOffset });\n}\n\n/**\n * @name toUnix\n * @param {number|string=} utcOffset\n * @returns {function(*=): number}\n * @throws Error\n */\nexport function toUnix(utcOffset) {\n  return (date) => transform(date, { unixTimestamp: true, utcOffset });\n}\n\n/**\n * @name toYearMonthDay\n * @param {number|string=} utcOffset\n * @returns {function(*=): string}\n * @throws Error\n */\nexport function toYearMonthDay(utcOffset) {\n  return (date) => transform(date, { format: \"YYYY-MM-DD\", utcOffset });\n}\n\nexport class VicisTransformDate {\n  /**\n   * @name toDateTime\n   * @static\n   * @public\n   * @param {string|object=} config\n   * @returns {function(*=): number|string}\n   * @throws Error\n   */\n  static toDateTime = toDateTime;\n  /**\n   * @name toFormat\n   * @static\n   * @public\n   * @param {string=} format\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): number|string}\n   * @throws Error\n   */\n  static toFormat = toFormat;\n  /**\n   * @name toFunction\n   * @static\n   * @public\n   * @param {string|object=} config\n   * @returns {function(*=): number|string}\n   */\n  static toFunction(config) {\n    return (date) => transform(date, config);\n  }\n  /**\n   * @name toHourMinSec\n   * @static\n   * @public\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): string}\n   * @throws Error\n   */\n  static toHourMinSec = toHourMinSec;\n  /**\n   * @name toISO8601\n   * @static\n   * @public\n   * @param {boolean=true} keepLocalTime\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): string}\n   * @throws Error\n   */\n  static toISO8601 = toISO8601;\n  /**\n   * @name toISO\n   * @static\n   * @public\n   * @param {boolean=true} keepLocalTime\n   * @param {boolean=false} keepOffset\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): string}\n   * @throws Error\n   */\n  static toISO = toISO;\n  /**\n   * @name toRFC2822\n   * @static\n   * @public\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): string}\n   * @throws Error\n   */\n  static toRFC2822 = toRFC2822;\n  /**\n   * @name toUnix\n   * @static\n   * @public\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): number}\n   * @throws Error\n   */\n  static toUnix = toUnix;\n  /**\n   * @name toYearMonthDay\n   * @static\n   * @public\n   * @param {number|string=} utcOffset\n   * @returns {function(*=): string}\n   * @throws Error\n   */\n  static toYearMonthDay = toYearMonthDay;\n  /**\n   * @name toFunction\n   * @public\n   * @param {string|object=} config\n   * @returns {function(*=): number|string}\n   */\n  toFunction(config) {\n    return (date) => transform(date, config);\n  }\n}\n"],"names":["transform","dateTime","config","Error","options","Object","assign","format","keepLocalTime","keepOffset","rfc2822","unixTimestamp","utcOffset","undefined","instance","moment","isValid","Number","isInteger","valueOf","toDate","toUTCString","toISOString","toDateTime","date","toFormat","toHourMinSec","toISO8601","toISO","toRFC2822","toUnix","toYearMonthDay","suppressDeprecationWarnings","VicisTransformDate","toFunction"],"mappings":"iiBASA,SAASA,UAAUC,EAAUC,OACtBD,QACG,IAAIE,MAAO,iBAAgBF,OAE/BG,EAAU,GACVF,IACoB,iBAAXA,EACTG,OAAOC,OAAOF,EAAS,CAAEG,OAAQL,IAEjCG,OAAOC,OAAOF,EAASF,UAGrBK,OAAEA,EAAFC,cAAUA,EAAVC,WAAyBA,EAAzBC,QAAqCA,EAArCC,cAA8CA,EAA9CC,UAA6DA,GAAc,CAE7EL,YAAQM,EACRL,eAAe,EACfC,YAAY,EACZE,eAAe,EACfC,eAAWC,EACXH,SAAS,KAERN,GAECU,EAAWC,UAAOd,OACnBa,EAASE,gBACN,IAAIb,MAAO,iBAAgBF,UAE/BgB,OAAOC,UAAUN,IAAeA,GAAkC,iBAAdA,IACtDE,EAASF,UAAUA,EAAWJ,IAEV,IAAlBG,EACKG,EAASK,UAEI,iBAAXZ,EACFO,EAASP,OAAOH,EAAQG,SAEjB,IAAZG,EACKI,EAASM,SAASC,cAEpBP,EAASQ,YAAYb,GASvB,SAASc,WAAWrB,UACjBsB,GAASxB,UAAUwB,EAAMtB,GAU5B,SAASuB,SAASlB,EAAS,sBAAuBK,UAC/CY,GAASxB,UAAUwB,EAAM,CAAEjB,OAAAA,EAAQK,UAAAA,IAStC,SAASc,aAAad,UACnBY,GAASxB,UAAUwB,EAAM,CAAEjB,OAAQ,WAAYK,UAAAA,IAUlD,SAASe,UAAUnB,GAAgB,EAAMI,UACtCY,GAASxB,UAAUwB,EAAM,CAAEhB,cAAAA,EAAeC,YAAY,EAAMG,UAAAA,IAW/D,SAASgB,MAAMpB,GAAgB,EAAMC,GAAa,EAAOG,UACtDY,GAASxB,UAAUwB,EAAM,CAAEhB,cAAAA,EAAeC,WAAAA,EAAYG,UAAAA,IASzD,SAASiB,UAAUjB,UAChBY,GAASxB,UAAUwB,EAAM,CAAEd,SAAS,EAAME,UAAAA,IAS7C,SAASkB,OAAOlB,UACbY,GAASxB,UAAUwB,EAAM,CAAEb,eAAe,EAAMC,UAAAA,IASnD,SAASmB,eAAenB,UACrBY,GAASxB,UAAUwB,EAAM,CAAEjB,OAAQ,aAAcK,UAAAA,cAnIpDoB,6BAA8B,EAsI9B,MAAMC,qCA2BO/B,UACRsB,GAASxB,UAAUwB,EAAMtB,GAiEnCgC,WAAWhC,UACDsB,GAASxB,UAAUwB,EAAMtB,oBA9FxB+B,gCASSV,4BATTU,8BAmBOR,0BAnBPQ,kCAsCWP,8BAtCXO,+BAgDQN,2BAhDRM,2BA2DIL,uBA3DJK,+BAoEQJ,2BApERI,4BA6EKH,wBA7ELG,oCAsFaF"}